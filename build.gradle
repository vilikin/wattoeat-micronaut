plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
    id "org.hidetake.swagger.generator" version "2.18.1"
}



version "0.1"
group "micronaut.server"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:1.1.2"
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    // Essentials
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-runtime"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    implementation "io.reactivex.rxjava2:rxkotlin:2.3.0"

    // Tests
    kaptTest "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.mockito:mockito-junit-jupiter:2.22.0"
    testCompile "org.mock-server:mockserver-netty:5.5.4"

    // Swagger
    kapt "io.micronaut.configuration:micronaut-openapi"
    compile "io.swagger.core.v3:swagger-annotations"
    swaggerUI "org.webjars:swagger-ui:3.10.0"
    
    // DB
    compile "io.micronaut.configuration:micronaut-postgres-reactive"
    compile "io.micronaut.configuration:micronaut-flyway"
    compile "org.postgresql:postgresql:9.3-1100-jdbc4"
}

swaggerSources {
    api {
        inputFile = file("$buildDir/tmp/kapt3/classes/main/META-INF/swagger/micronaut-boilerplate-1.0.yml")
        ui {
            outputDir = file("$buildDir/tmp/kapt3/classes/main/META-INF/swagger-ui")
        }
        reDoc {
            outputDir = file("$buildDir/tmp/kapt3/classes/main/META-INF/redoc")
            scriptSrc = "https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"
        }
    }
}

classes.dependsOn generateSwaggerUI
classes.dependsOn generateReDoc

test.classpath += configurations.developmentOnly

mainClassName = "micronaut.server.Application"

test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote")

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = "1.8" 
	    //Will retain parameter names for Java reflection
	    javaParameters = true 
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = "1.8" 
	    javaParameters = true 
	}
}

task stage(dependsOn: ["build", "clean"])

// Don't run tests on build (Heroku doesn't like it)
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(build)) {
        test.enabled = false
    }
}

build.mustRunAfter clean